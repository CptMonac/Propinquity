XBeeManager: STATE_XBEE_INIT
------------
o GUI: scan/next and display found devices
o Scanning for XBees

PlayerList: STATE_PLAYER_LIST
-----------

o GUI: Add, remove, edit players, Next
o Read and write player names from disk

LevelSelect: STATE_LEVEL_SELECT
------------

o Load levels from file -> levels
o Substate: LEVEL_SELECT_P1, LEVEL_SELECT_P2, LEVEL_SELECT_SONG, LEVEL_SELECTED
o UI: select players and songs
o FIXME: XBee management











XBee communication:
-------------------

Packets:

PROX_OUT_PACKET_TYPE(1): type, stepnumhigh, stepnumlow, activethisandthis+1, activethis+2andthis+3
PROX_IN_PACKET_TYPE(2): type, addr<<1 | touched, turnnumhigh, turnnumlow, proxreadinghigh, proxreadinglow
VIBE_OUT_PACKET_TYPE(3): type, vibe intensity
ACCEL_IN_PACKET_TYPE(4): type, addr(7,8,15,16), x, y, z 
CONFIG_OUT_PACKET_TYPE(5): type, steplengthhigh, steplengthlow
CONFIG_ACK_PACKET_TYPE(6): type, addr, turnlengthhigh, turnlengthlow
VIBE_IN_PACKET_TYPE(7): type, addr (5,6,13,14), buttons(1=left,2=right,3=center,4=all)


XBeeManager:
o For each serial port:
  - xbee = new XBeeReader
  - xbee.startXBee()
  - xbee.getNI() -> xBeeEvent(): getXBeeReading(), parseXBeeRX16Frame() -> nodeId
  - xbee.stopXBee()


Propinquity:
o xBeeEvent(): All events pass through here
  -> XBeeManager.xBeeEvent()
  -> LevelSelect.xBeeEvent()
  -> Level.xBeeEvent()

Player:
- initProxComm(): xpansProx = new XPan
- initAccelComm(): xpansAccel = new XPan
- initVibeComm(): xpansVibe = new XPan
- discoverPatches(): XPan.nodeDiscover()
- clear(): for all xbees: XBeeReader.stopXBee()

XPan(XBeeReader):
- XBeeReader.startXBee()
- nodeDiscover(): XBeeReader.nodeDiscover()
- stop(): XBeeReader.stopXBee()
- broadcast*();
- sendOutgoing():
- create packets

LevelSelect:
initPlayer():
 - Player.initProxComm(xbee1, xbee2)
 - Player.initAccelComm(xbee1, xbee2)
 - Player.initVibeComm(xbee)
 - Player.discoverPatches()
xBeeEvent():
 - XBeeReader.getXBeeReading(), parseXBeeRX16Frame()
 - if (buffer.length > 11) Accumulate found patches
 - if CONFIG_ACK packet: accumulate config ACKs
 - if VIBE_IN packet: use capacitive sensing to navigate

Level:
xBeeEvent():
 - XBeeReader.getXBeeReading()
 - only handling SERIES1_RX16PACKET
 - if PROX_IN packet: processProxReading()
 - if ACCEL_IN packet: processAccelReading()
 - if CONFIG_ACK packet: processConfigAck
 - if VIBE_IN packet and packet[2] == 4: doPause()

